Rough composition:

  1. Quick intro to node and socket.io (canvas also? refer to: http://net.tutsplus.com/tutorials/javascript-ajax/canvas-from-scratch-introducing-canvas/)
  2. How to set up node.js, npm, socket.io, paperboy
  3. Write and explain index.html and client.js (host it with paperboy)
  4. Show how/that it works
  5. "But drawing all by ourselves is boring, right?" Explain Socket.IO further
  6. Show code and explain every piece of the Socket.IO code.
  7. Show that it works
  8. What now? Perhaps use a datastore to save everything? Could use a ghetto-db in the form of an array

Draft:

Title:
???

Intro paragraph:
In this tutorial, I will try to show you why node.js is truly deserving of all the hype and popularity it has been receiving. Together we will create a simple, multi-user whiteboard using node.js, socket.io and the canvas HTML element, through which you will hopefully discover the vast possibilities of the node.js ecosystem!

Tutorial details:
Topic: ???
Difficulty: Beginner (???)
Estimated Completion Time: 30min (???)

So, what's node.js?
(NODE.JS LOGO FROM NODEJS.ORG)
Node.js is, in short, an event-driven, non-blocking I/O framework built on top of Google's V8 JavaScript engine. What does this mean for you, you ask? Well, in contrast to the more traditional model used today with employing a new thread for each request on a server, node.js handles every request by hooking into the operating system, telling it to notify node when a new connection is made, before going to sleep. If a new connection is made, node executes the callback. Each new connection is nothing more than a small heap allocation. (REWRITE THIS, TOO MUCH LIKE NODEJS.ORG)
In reality, you don't really have to understand what this means, other than that it allows for a great number of concurrent connections. Perhaps even more interesting to web developers is the fact that you write node apps in JavaScript. This allows for seamless integration with the frontend, making seemingly complex applications a breeze to write. So, what are we waiting for? Let's get to it!

Setting up node.js:
Before we begin writing our app we have to install node.js on our development machine. For now, the Windows support is rather lacking, so I'll assume you have access to either an OS X or Linux system (if you for some reason only have access to Windows, I reccomend running some Linux distribution in a VM).

   * On OS X: You can either directly download a .pkg file of the newest release here: https://sites.google.com/site/nodejsmacosx/, or you can use either Homebrew or MacPorts if you have one of those installed like this: "brew install node" or "port install nodejs"
   * On Ubuntu: Just run these commands in your terminal: "sudo apt-get install python-software-properties sudo add-apt-repository ppa:jerome-etienne/neoip sudo apt-get update sudo apt-get install nodejs"
   * (PERHAPS JUST LINK TO THE INSTALL PAGE ON GITHUB)
Next, we have to install the great node package manager, npm. This is very easily done by running this command in your terminal, on both os x and linux: curl http://npmjs.org/install.sh | sh

Hello world!
Just to give you an idea about how node.js works before we start with the interesting stuff, we'll write the classic; Hello World!

(BLA BLA HELLO WORLD WRITE THIS LATER)
(In this section, explain everything including require etc.)

Starting out: (???)
To begin with, we want to write a server in node that just serves up any static files we want to use, like an index.html and some scripts. There is no use in reinventing the wheel here, so we'll use a great node module called paperboy. It can be installed with npm like almost every other node module, with this command: npm install paperboy. For this tutorial just copy-pasting the example use from the <a href="//github.com/felixge/node-paperboy/">paperboy github repo</a> is enough. What this does is make any static file we put in our webroot directory reachable by a browser (be careful with what you put in this folder!). For our convenience, we'll also include the log function from the docs, so we can see some info about every request on the server in our terminal. Save this file as server.js to your working directory (not in the webroot folder, this file should not be reachable through a browser!). To test if this worked, let's create a simple html-file in our webroot directory (code), and save it as index.html. If we now visit our terminal, run (code= node server.js) and navigate our browser to http://localhost:8000/index.html, we should see this: (image). Now, our very simple web server is ready. Next, we'll leave the back end for a while, and focus on the front end.

A blank canvas: (image of <canvas></canvas> or perhaps html 5 logo)
The HTML-element canvas has made all kinds of drawing operations on the web that much easier, and that's just what we'll use for making our simple whiteboard app. If you've never used or even heard about the canvas element before, it could be a good idea to brush up a bit by reading Rob Hawkes' introduction to it <a href="http://net.tutsplus.com/tutorials/javascript-ajax/canvas-from-scratch-introducing-canvas/">here.</a> You will however still be able to follow the rest of the tutorial without prior canvas experience, and if you are mostly reading this as an introduction to node.js and socket.io, you can safely just keep reading.
All we have to do in our index.html is to remove the hello world stuff and add the <canvas> tag. We'll also give it an id, so we can easily find it with our JavaScript later on. (code)
A page with nothing but a canvas looks like just that, a canvas. We now have a completely blank page, so let's do something about that!

An artist needs a brush: (???)
To make our brush we'll use JavaScript, as noted earlier. So, create a file, client.js, and put it next to the index.html file in your webroot directory. To begin with, we have to find our canvas element, and its 2d drawing context(explain what this is!!!), like this: (code). We're using jQuery to find it, so we'll have to import both jQuery and the client.js script in our index.html file. Just insert the following two lines into the head or at the end of the body of index.html, and you're sorted. (code). (REARRANGE A BIT HERE TO EXPLAIN onload ETC).
Next, to make it simple, we'll set the height and width of our canvas to be the same size as the browser window: (code). This will be a problem if you'll have many users with different screen sizes drawing on the same canvas, but for this demonstration it'll do.
So, with most of the initialization out of the way, we have to find out just how this script should work. Basically, what we want it to do is that when a(n?) user presses his left mouse button and moves the mouse around, he should draw on the page. When he unpresses(REWRITE) the button he should stop drawing.

What now?
(TO BE WRITTEN)
(Should include something about "you now know the basics of node.js and socket.io, go create", and ideas for extending the app. Datastore? Maybe follow this http://net.tutsplus.com/tutorials/html-css-techniques/how-to-create-a-web-based-drawing-application-using-canvas-new-premium-tutorial/ premium tutorial to make the actual drawing-part better?

My original pitch:

This tutorial would be a detailed guide on how to use node.js with socket.io to make a simple multi-user whiteboard/drawing canvas. It would cut away all unnecessary content, and focus on giving readers a simple to follow and easy to read way of using socket.io in their own projects. The end product is a webpage where you can draw with your mouse, and it will show up on every visitors screen. To make it simple the server would store no data, making it all real-time. Of course, the tutorial could be extended to also contain a how-to on drawing with different colors/sizes of "brush" on a canvas, or perhaps storing the data in a datastore so every new visitor sees what has been drawn before.
In reality it could really be pulled towards focusing on any of the main areas, perhaps writing it as a "the power of node.js" kind of tutorial, or as a intro to Socket.IO, or even <canvas>.
If this is something you could see Nettuts+ publishing, let me know and I'll get to writing it at once! I already have well-commented, working code for the tutorial.

Response from editor:

Hello Martin,

Sounds like a great idea for a tutorial. Do write this one for us but please remember that whether we publish this or not depends on the final quality of the code and content.  We can edit it for clarity, of course, but the content, code and explanation has to be rock solid.

You can refer here - http://net.tutsplus.com/about/write-a-tutorial/ - for further details on how to format your tutorial for submission. Also, please use this formatting template to write your tutorial:http://nettuts.s3.amazonaws.com/generic_tutorial_template/tut.html.zip

It's imperative that you use numerous headings, lists, blockquotes, and images in your tutorial. This helps to divide it as much as possible for the scrolling readers. Should you have any additional questions, please email net@tutsplus.com or this address with your query. :)

Looking forward to reading it!

Sid,
NetTuts+ Associate Editor

